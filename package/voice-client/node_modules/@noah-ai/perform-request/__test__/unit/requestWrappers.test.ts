import {
  deleteRequest,
  getRequest,
  patchRequest,
  postRequest,
  putRequest,
  rawDeleteRequest,
  rawGetRequest,
  rawPatchRequest,
  rawPostRequest,
  rawPutRequest,
} from '../../src';
import * as PerformRequest from '../../src/performRequest';

jest.mock('../../src/performRequest');

const mockPerformRequest = jest.spyOn(PerformRequest, 'performRequest');

describe('requestWrappers', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('getRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await getRequest(
      'https://woo.com/yay',
      {
        woo: 'yay',
      },
      { headers: { blah: 'boo' } },
    );

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: { Accept: 'application/json', blah: 'boo' },
      method: 'GET',
      qs: { woo: 'yay' },
    });
    expect(res).toStrictEqual('woo');
  });

  test('rawGetRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await rawGetRequest('https://woo.com/yay', {
      headers: { blah: 'boo' },
    });

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: { Accept: 'application/json', blah: 'boo' },
      method: 'GET',
    });
    expect(res).toStrictEqual('woo');
  });

  test('patchRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await patchRequest(
      'https://woo.com/yay',
      { woo: 'yay' },
      {
        headers: { blah: 'boo' },
      },
    );

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        blah: 'boo',
      },
      body: '{"woo":"yay"}',
      method: 'PATCH',
    });
    expect(res).toStrictEqual('woo');
  });

  test('rawPatchRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await rawPatchRequest('https://woo.com/yay', {
      headers: { blah: 'boo' },
    });

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: { Accept: 'application/json', blah: 'boo' },
      method: 'PATCH',
    });
    expect(res).toStrictEqual('woo');
  });

  test('putRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await putRequest(
      'https://woo.com/yay',
      { woo: 'yay' },
      {
        headers: { blah: 'boo' },
      },
    );

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        blah: 'boo',
      },
      body: '{"woo":"yay"}',
      method: 'PUT',
    });
    expect(res).toStrictEqual('woo');
  });

  test('rawPutRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await rawPutRequest('https://woo.com/yay', {
      headers: { blah: 'boo' },
    });

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: { Accept: 'application/json', blah: 'boo' },
      method: 'PUT',
    });
    expect(res).toStrictEqual('woo');
  });

  test('postRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await postRequest(
      'https://woo.com/yay',
      { woo: 'yay' },
      {
        headers: { blah: 'boo' },
      },
    );

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        blah: 'boo',
      },
      body: '{"woo":"yay"}',
      method: 'POST',
    });
    expect(res).toStrictEqual('woo');
  });

  test('rawPostRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await rawPostRequest('https://woo.com/yay', {
      headers: { blah: 'boo' },
    });

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: { Accept: 'application/json', blah: 'boo' },
      method: 'POST',
    });
    expect(res).toStrictEqual('woo');
  });

  test('deleteRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await deleteRequest(
      'https://woo.com/yay',
      { woo: 'yay' },
      {
        headers: { blah: 'boo' },
      },
    );

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        blah: 'boo',
      },
      body: '{"woo":"yay"}',
      method: 'DELETE',
    });
    expect(res).toStrictEqual('woo');
  });

  test('rawDeleteRequest', async () => {
    mockPerformRequest.mockResolvedValue('woo');
    const res = await rawDeleteRequest('https://woo.com/yay', {
      headers: { blah: 'boo' },
    });

    expect(mockPerformRequest).toHaveBeenCalledTimes(1);
    expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
      headers: { Accept: 'application/json', blah: 'boo' },
      method: 'DELETE',
    });
    expect(res).toStrictEqual('woo');
  });
});
