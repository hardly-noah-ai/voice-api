"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rawDeleteRequest = exports.deleteRequest = exports.rawPostRequest = exports.postRequest = exports.rawPutRequest = exports.putRequest = exports.rawPatchRequest = exports.patchRequest = exports.rawGetRequest = exports.getRequest = void 0;
exports.builtInDefaultOptions = builtInDefaultOptions;
exports.getRequestFunctions = getRequestFunctions;
const lodash_1 = require("lodash");
const performRequest_1 = require("./performRequest");
function builtInDefaultOptions() {
    return {
        headers: {
            Accept: 'application/json',
        },
    };
}
function getRequestFunctions(defaultOptions = () => ({})) {
    function request(method, url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestOptions = (0, lodash_1.merge)(builtInDefaultOptions(), defaultOptions(), options, {
                method,
            });
            return yield (0, performRequest_1.performRequest)(url, requestOptions);
        });
    }
    function jsonRequest(method, url, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield request(method, url, (0, lodash_1.merge)(Object.assign({}, (jsonBody && {
                body: JSON.stringify(jsonBody),
                headers: { 'Content-Type': 'application/json' },
            })), options));
        });
    }
    function rawGetRequest(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield request('GET', url, options);
        });
    }
    function getRequest(url, qs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield request('GET', url, (0, lodash_1.merge)(Object.assign({}, (qs && { qs })), options, options));
        });
    }
    function putRequest(url, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield jsonRequest('PUT', url, jsonBody, options);
        });
    }
    function rawPutRequest(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield request('PUT', url, options);
        });
    }
    function patchRequest(url, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield jsonRequest('PATCH', url, jsonBody, options);
        });
    }
    function rawPatchRequest(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield request('PATCH', url, options);
        });
    }
    function postRequest(url, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield jsonRequest('POST', url, jsonBody, options);
        });
    }
    function rawPostRequest(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield request('POST', url, options);
        });
    }
    function deleteRequest(url, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield jsonRequest('DELETE', url, jsonBody, options);
        });
    }
    function rawDeleteRequest(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield request('DELETE', url, options);
        });
    }
    return {
        getRequest,
        rawGetRequest,
        patchRequest,
        rawPatchRequest,
        putRequest,
        rawPutRequest,
        postRequest,
        rawPostRequest,
        deleteRequest,
        rawDeleteRequest,
    };
}
const { getRequest, rawGetRequest, patchRequest, rawPatchRequest, putRequest, rawPutRequest, postRequest, rawPostRequest, deleteRequest, rawDeleteRequest, } = getRequestFunctions();
exports.getRequest = getRequest;
exports.rawGetRequest = rawGetRequest;
exports.patchRequest = patchRequest;
exports.rawPatchRequest = rawPatchRequest;
exports.putRequest = putRequest;
exports.rawPutRequest = rawPutRequest;
exports.postRequest = postRequest;
exports.rawPostRequest = rawPostRequest;
exports.deleteRequest = deleteRequest;
exports.rawDeleteRequest = rawDeleteRequest;
//# sourceMappingURL=requestWrappers.js.map