"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
const PerformRequest = __importStar(require("../../src/performRequest"));
jest.mock('../../src/performRequest');
const mockPerformRequest = jest.spyOn(PerformRequest, 'performRequest');
describe('requestWrappers', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    test('getRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.getRequest)('https://woo.com/yay', {
            woo: 'yay',
        }, { headers: { blah: 'boo' } });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: { Accept: 'application/json', blah: 'boo' },
            method: 'GET',
            qs: { woo: 'yay' },
        });
        expect(res).toStrictEqual('woo');
    }));
    test('rawGetRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.rawGetRequest)('https://woo.com/yay', {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: { Accept: 'application/json', blah: 'boo' },
            method: 'GET',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('patchRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.patchRequest)('https://woo.com/yay', { woo: 'yay' }, {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                blah: 'boo',
            },
            body: '{"woo":"yay"}',
            method: 'PATCH',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('rawPatchRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.rawPatchRequest)('https://woo.com/yay', {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: { Accept: 'application/json', blah: 'boo' },
            method: 'PATCH',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('putRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.putRequest)('https://woo.com/yay', { woo: 'yay' }, {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                blah: 'boo',
            },
            body: '{"woo":"yay"}',
            method: 'PUT',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('rawPutRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.rawPutRequest)('https://woo.com/yay', {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: { Accept: 'application/json', blah: 'boo' },
            method: 'PUT',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('postRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.postRequest)('https://woo.com/yay', { woo: 'yay' }, {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                blah: 'boo',
            },
            body: '{"woo":"yay"}',
            method: 'POST',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('rawPostRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.rawPostRequest)('https://woo.com/yay', {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: { Accept: 'application/json', blah: 'boo' },
            method: 'POST',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('deleteRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.deleteRequest)('https://woo.com/yay', { woo: 'yay' }, {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
                blah: 'boo',
            },
            body: '{"woo":"yay"}',
            method: 'DELETE',
        });
        expect(res).toStrictEqual('woo');
    }));
    test('rawDeleteRequest', () => __awaiter(void 0, void 0, void 0, function* () {
        mockPerformRequest.mockResolvedValue('woo');
        const res = yield (0, src_1.rawDeleteRequest)('https://woo.com/yay', {
            headers: { blah: 'boo' },
        });
        expect(mockPerformRequest).toHaveBeenCalledTimes(1);
        expect(mockPerformRequest).toHaveBeenCalledWith('https://woo.com/yay', {
            headers: { Accept: 'application/json', blah: 'boo' },
            method: 'DELETE',
        });
        expect(res).toStrictEqual('woo');
    }));
});
//# sourceMappingURL=requestWrappers.test.js.map