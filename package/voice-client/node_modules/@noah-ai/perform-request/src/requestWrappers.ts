import { merge } from 'lodash';
import {
  PerformRequestOptions,
  QueryObject,
  performRequest,
} from './performRequest';

export function builtInDefaultOptions() {
  return {
    headers: {
      Accept: 'application/json',
    },
  };
}

export type RequestFunctions = ReturnType<typeof getRequestFunctions>;
export function getRequestFunctions(
  defaultOptions: () => PerformRequestOptions = () => ({}),
) {
  async function request<T>(
    method: PerformRequestOptions['method'],
    url: string,
    options?: PerformRequestOptions,
  ) {
    const requestOptions = merge(
      builtInDefaultOptions(),
      defaultOptions(),
      options,
      {
        method,
      },
    );
    return await performRequest<T>(url, requestOptions);
  }

  async function jsonRequest<T>(
    method: PerformRequestOptions['method'],
    url: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await request<T>(
      method,
      url,
      merge(
        {
          ...(jsonBody && {
            body: JSON.stringify(jsonBody),
            headers: { 'Content-Type': 'application/json' },
          }),
        },
        options,
      ),
    );
  }

  async function rawGetRequest<T>(
    url: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await request<T>('GET', url, options);
  }

  async function getRequest<T>(
    url: string,
    qs?: QueryObject,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await request<T>(
      'GET',
      url,
      merge({ ...(qs && { qs }) }, options, options),
    );
  }

  async function putRequest<T>(
    url: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await jsonRequest<T>('PUT', url, jsonBody, options);
  }

  async function rawPutRequest<T>(
    url: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await request<T>('PUT', url, options);
  }

  async function patchRequest<T>(
    url: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await jsonRequest<T>('PATCH', url, jsonBody, options);
  }

  async function rawPatchRequest<T>(
    url: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await request<T>('PATCH', url, options);
  }

  async function postRequest<T>(
    url: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await jsonRequest<T>('POST', url, jsonBody, options);
  }

  async function rawPostRequest<T>(
    url: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await request<T>('POST', url, options);
  }

  async function deleteRequest<T>(
    url: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await jsonRequest<T>('DELETE', url, jsonBody, options);
  }

  async function rawDeleteRequest<T>(
    url: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await request<T>('DELETE', url, options);
  }

  return {
    getRequest,
    rawGetRequest,
    patchRequest,
    rawPatchRequest,
    putRequest,
    rawPutRequest,
    postRequest,
    rawPostRequest,
    deleteRequest,
    rawDeleteRequest,
  };
}

const {
  getRequest,
  rawGetRequest,
  patchRequest,
  rawPatchRequest,
  putRequest,
  rawPutRequest,
  postRequest,
  rawPostRequest,
  deleteRequest,
  rawDeleteRequest,
} = getRequestFunctions();
export {
  getRequest,
  rawGetRequest,
  patchRequest,
  rawPatchRequest,
  putRequest,
  rawPutRequest,
  postRequest,
  rawPostRequest,
  deleteRequest,
  rawDeleteRequest,
};
