import { RuleTester } from "@typescript-eslint/rule-tester";

import rule from "../rules/enforce-container-types";
import { AST_NODE_TYPES } from "@typescript-eslint/utils";

const ruleTester = new RuleTester();
ruleTester.run("enforce-container-types", rule, {
  valid: [
    {
      name: "Using correct index into ContainerTypes for resolve",
      code: `
          container.resolve<ContainerTypes['ValidToken']>('ValidToken');
        `,
    },
    {
      name: "Using correct index into ContainerTypes for resolving an ENV",
      code: `
          container.resolve<ContainerTypes['ENV']>('ENV#WOO');
        `,
    },
    {
      name: "Resolving a class",
      code: `
            container.resolve(ValidToken);
          `,
    },
    {
      name: "Using correct index into ContainerTypes for register",
      code: `
            container.register<ContainerTypes['ValidToken']>('ValidToken', {});
          `,
    },
    {
      name: "Registering a class",
      code: `
              container.register(ValidToken, {});
            `,
    },
    {
      name: "Using correct index into ContainerTypes for injecting member variable",
      code: `
          class MyClass {
          constructor(@inject('ValidToken') private client: ContainerTypes['ValidToken']) {}
        }
        `,
    },
    {
      name: "ENV member variable inject",
      code: `
          class MyClass {
          constructor(@inject('ENV#BLAH') private client: ContainerTypes['ENV']) {}
        }
        `,
    },
    {
      name: "Class member variable inject",
      code: `
            class MyClass {
            constructor(@inject(ValidClass) private client: ValidClass) {}
          }
          `,
    },
    {
      name: "Class variable",
      code: `
              class MyClass {
              constructor(private client: ValidClass) {}

              public woo(){}
            }
            `,
    },
  ],
  invalid: [
    {
      name: "Not using any type for resolve",
      code: `
          container.resolve('InvalidToken'); 
        `,
      errors: [
        {
          type: AST_NODE_TYPES.CallExpression,
          messageId: "explicitGenerics",
        },
      ],
    },
    {
      name: "Not using any type for register",
      code: `
            container.register('InvalidToken', {}); 
          `,
      errors: [
        {
          type: AST_NODE_TYPES.CallExpression,
          messageId: "explicitGenerics",
        },
      ],
    },
    {
      name: "Not using ContainerTypes for resolve",
      code: `
          container.resolve<string>('InvalidToken'); 
        `,
      errors: [
        {
          type: AST_NODE_TYPES.CallExpression,
          messageId: "typeArgumentReference",
        },
      ],
    },
    {
      name: "Not using ContainerTypes for register",
      code: `
            container.register<string>('InvalidToken'); 
          `,
      errors: [
        {
          type: AST_NODE_TYPES.CallExpression,
          messageId: "typeArgumentReference",
        },
      ],
    },
    {
      name: "Unrelated index reference into ContainerTypes for resolve",
      code: `
            container.resolve<ContainerTypes['Woo']>('InvalidToken'); 
          `,
      errors: [
        {
          type: AST_NODE_TYPES.CallExpression,
          messageId: "relatedTypeReference",
        },
      ],
    },
    {
      name: "Unrelated index reference into ContainerTypes for register",
      code: `
            container.register<ContainerTypes['Woo']>('InvalidToken'); 
          `,
      errors: [
        {
          type: AST_NODE_TYPES.CallExpression,
          messageId: "relatedTypeReference",
        },
      ],
    },
    {
      name: "Not using ContainerTypes with inject for variable",
      code: `
          class MyClass {
          constructor(@inject('InvalidToken') client: string) {}
        }
        `,
      errors: [
        {
          type: AST_NODE_TYPES.MethodDefinition,
          messageId: "injectTypeArgumentReference",
        },
      ],
    },
    {
      name: "Not using ContainerTypes with inject for member variable",
      code: `
          class MyClass {
          constructor(@inject('InvalidToken') private client: string) {}
        }
        `,
      errors: [
        {
          type: AST_NODE_TYPES.MethodDefinition,
          messageId: "injectTypeArgumentReference",
        },
      ],
    },
    {
      name: "Unrelated index reference into ContainerTypes with inject for memeber variable",
      code: `
          class MyClass {
          constructor(@inject('InvalidToken') private client: ContainerTypes['Woo']) {}
        }
        `,
      errors: [
        {
          type: AST_NODE_TYPES.MethodDefinition,
          messageId: "injectRelatedTypeReference",
        },
      ],
    },
    {
      name: "Unrelated index reference into ContainerTypes with inject",
      code: `
          class MyClass {
          constructor(@inject('InvalidToken') client: ContainerTypes['Woo']) {}
        }
        `,
      errors: [
        {
          type: AST_NODE_TYPES.MethodDefinition,
          messageId: "injectRelatedTypeReference",
        },
      ],
    },
    {
      name: "No type with inject for variable",
      code: `
          class MyClass {
          constructor(@inject('InvalidToken') client) {}
        }
        `,
      errors: [
        {
          type: AST_NODE_TYPES.MethodDefinition,
          messageId: "injectTypeArgumentReference",
        },
      ],
    },
    {
      name: "No type with inject for member variable",
      code: `
          class MyClass {
          constructor(@inject('InvalidToken') private client) {}
        }
        `,
      errors: [
        {
          type: AST_NODE_TYPES.MethodDefinition,
          messageId: "injectTypeArgumentReference",
        },
      ],
    },
  ],
});
