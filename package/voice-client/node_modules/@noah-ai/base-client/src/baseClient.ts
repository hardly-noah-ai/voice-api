import { merge, omit } from 'lodash';

import {
  PerformRequestOptions,
  QueryObject,
  RequestError,
  deleteRequest,
  getRequest,
  patchRequest,
  postRequest,
  putRequest,
} from '@noah-ai/perform-request';

export { RequestError };

type BaseClientOptionsObject = PerformRequestOptions;

export type BaseClientOptions =
  | BaseClientOptionsObject
  | (() => BaseClientOptionsObject | Promise<BaseClientOptionsObject>);

type GetAuthenticationHeaders = (
  url: string,
) => Record<string, string> | Promise<Record<string, string>>;

export class BaseClient {
  constructor(
    protected baseUri: string,
    protected getAuthenticationHeadersFunction?: GetAuthenticationHeaders,
    protected defaultRequestOptions?: BaseClientOptions,
  ) {}

  public async getAuthenticationHeaders(): Promise<Record<string, string>> {
    return (await this.getAuthenticationHeadersFunction?.(this.baseUri)) ?? {};
  }

  /**
   * Perform a GET request with a query string at the provided path
   *
   * @param {string} path
   * @param {QueryObject} qs
   * @param {PerformRequestOptions} options
   */
  public async get<T>(
    path: string,
    qs?: QueryObject,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await getRequest<T>(
      this.getUrl(path),
      qs,
      await this.createRequestOptions(options),
    );
  }

  /**
   * Perform a GET request without a query string at the provided path
   *
   * @param {string} path
   * @param {PerformRequestOptions} options
   */
  public async rawGet<T>(
    path: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await this.get(path, undefined, options);
  }

  /**
   * Perform a PUT request at the provided path with provided body
   *
   * @param {string} path
   * @param {object} jsonBody
   * @param {PerformRequestOptions} options
   */
  public async put<T>(
    path: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await putRequest<T>(
      this.getUrl(path),
      jsonBody,
      await this.createRequestOptions(options),
    );
  }

  /**
   * Perform a non-json body PUT request at the provided path
   *
   * @param {string} path
   * @param {PerformRequestOptions} options
   */
  public async rawPut<T>(
    path: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await this.put(path, undefined, options);
  }

  /**
   * Perform a PATCH request at the provided path with provided body
   *
   * @param {string} path
   * @param {object} jsonBody
   * @param {PerformRequestOptions} options
   */
  public async patch<T>(
    path: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await patchRequest<T>(
      this.getUrl(path),
      jsonBody,
      await this.createRequestOptions(options),
    );
  }

  /**
   * Perform a non-json body PATCH request at the provided path
   *
   * @param {string} path
   * @param {PerformRequestOptions} options
   */
  public async rawPatch<T>(
    path: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await this.patch(path, undefined, options);
  }

  /**
   * Perform a POST request at the provided path with provided body
   *
   * @param {string} path
   * @param {object} jsonBody
   * @param {PerformRequestOptions} options
   */
  public async post<T>(
    path: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await postRequest<T>(
      this.getUrl(path),
      jsonBody,
      await this.createRequestOptions(options),
    );
  }

  /**
   * Perform a non-json body POST request at the provided path
   *
   * @param {string} path
   * @param {PerformRequestOptions} options
   */
  public async rawPost<T>(
    path: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await this.post(path, undefined, options);
  }

  /**
   * Perform a DELETE request with a json body at the provided path
   *
   * @param {string} path
   * @param {object} jsonBody
   * @param {PerformRequestOptions} options
   */
  public async delete<T>(
    path: string,
    jsonBody?: object,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await deleteRequest<T>(
      this.getUrl(path),
      jsonBody,
      await this.createRequestOptions(options),
    );
  }

  /**
   * Perform a non-json body DELETE request at the provided path
   *
   * @param {string} path
   * @param {PerformRequestOptions} options
   */
  public async rawDelete<T>(
    path: string,
    options?: PerformRequestOptions,
  ): Promise<T> {
    return await this.delete(path, undefined, options);
  }

  private getUrl(path: string) {
    return `${this.baseUri}${path}`;
  }

  private async createRequestOptions(options?: PerformRequestOptions) {
    const clientOptions =
      typeof this.defaultRequestOptions === 'function'
        ? await this.defaultRequestOptions()
        : this.defaultRequestOptions;
    return merge({}, options);
  }
}
