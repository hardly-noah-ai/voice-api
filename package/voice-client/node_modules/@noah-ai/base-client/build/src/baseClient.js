"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = exports.RequestError = void 0;
const lodash_1 = require("lodash");
const perform_request_1 = require("@noah-ai/perform-request");
Object.defineProperty(exports, "RequestError", { enumerable: true, get: function () { return perform_request_1.RequestError; } });
class BaseClient {
    constructor(baseUri, getAuthenticationHeadersFunction, defaultRequestOptions) {
        this.baseUri = baseUri;
        this.getAuthenticationHeadersFunction = getAuthenticationHeadersFunction;
        this.defaultRequestOptions = defaultRequestOptions;
    }
    getAuthenticationHeaders() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return (_b = (yield ((_a = this.getAuthenticationHeadersFunction) === null || _a === void 0 ? void 0 : _a.call(this, this.baseUri)))) !== null && _b !== void 0 ? _b : {};
        });
    }
    /**
     * Perform a GET request with a query string at the provided path
     *
     * @param {string} path
     * @param {QueryObject} qs
     * @param {PerformRequestOptions} options
     */
    get(path, qs, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, perform_request_1.getRequest)(this.getUrl(path), qs, yield this.createRequestOptions(options));
        });
    }
    /**
     * Perform a GET request without a query string at the provided path
     *
     * @param {string} path
     * @param {PerformRequestOptions} options
     */
    rawGet(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.get(path, undefined, options);
        });
    }
    /**
     * Perform a PUT request at the provided path with provided body
     *
     * @param {string} path
     * @param {object} jsonBody
     * @param {PerformRequestOptions} options
     */
    put(path, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, perform_request_1.putRequest)(this.getUrl(path), jsonBody, yield this.createRequestOptions(options));
        });
    }
    /**
     * Perform a non-json body PUT request at the provided path
     *
     * @param {string} path
     * @param {PerformRequestOptions} options
     */
    rawPut(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.put(path, undefined, options);
        });
    }
    /**
     * Perform a PATCH request at the provided path with provided body
     *
     * @param {string} path
     * @param {object} jsonBody
     * @param {PerformRequestOptions} options
     */
    patch(path, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, perform_request_1.patchRequest)(this.getUrl(path), jsonBody, yield this.createRequestOptions(options));
        });
    }
    /**
     * Perform a non-json body PATCH request at the provided path
     *
     * @param {string} path
     * @param {PerformRequestOptions} options
     */
    rawPatch(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.patch(path, undefined, options);
        });
    }
    /**
     * Perform a POST request at the provided path with provided body
     *
     * @param {string} path
     * @param {object} jsonBody
     * @param {PerformRequestOptions} options
     */
    post(path, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, perform_request_1.postRequest)(this.getUrl(path), jsonBody, yield this.createRequestOptions(options));
        });
    }
    /**
     * Perform a non-json body POST request at the provided path
     *
     * @param {string} path
     * @param {PerformRequestOptions} options
     */
    rawPost(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.post(path, undefined, options);
        });
    }
    /**
     * Perform a DELETE request with a json body at the provided path
     *
     * @param {string} path
     * @param {object} jsonBody
     * @param {PerformRequestOptions} options
     */
    delete(path, jsonBody, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, perform_request_1.deleteRequest)(this.getUrl(path), jsonBody, yield this.createRequestOptions(options));
        });
    }
    /**
     * Perform a non-json body DELETE request at the provided path
     *
     * @param {string} path
     * @param {PerformRequestOptions} options
     */
    rawDelete(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.delete(path, undefined, options);
        });
    }
    getUrl(path) {
        return `${this.baseUri}${path}`;
    }
    createRequestOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const clientOptions = typeof this.defaultRequestOptions === 'function'
                ? yield this.defaultRequestOptions()
                : this.defaultRequestOptions;
            return (0, lodash_1.merge)({}, options);
        });
    }
}
exports.BaseClient = BaseClient;
//# sourceMappingURL=baseClient.js.map