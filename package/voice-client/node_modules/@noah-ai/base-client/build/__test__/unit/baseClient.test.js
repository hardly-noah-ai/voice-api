"use strict";
// import { MetricName, MetricsContext } from '@noah-ai/metrics';
// import { RequestError, BaseClient } from '../../src';
// import * as PerformRequest from '@noah-ai/perform-request';
// import {
//   expectToHaveBeenCalledOnceWith,
//   expectToHaveBeenCalledTimesWith,
//   MockAgent,
//   MockLogger,
// } from '@noah-ai/jest-helpers';
// jest.mock('@noah-ai/perform-request');
// const mockGetRequest = jest.spyOn(PerformRequest, 'getRequest');
// const mockPutRequest = jest.spyOn(PerformRequest, 'putRequest');
// const mockPatchRequest = jest.spyOn(PerformRequest, 'patchRequest');
// const mockPostRequest = jest.spyOn(PerformRequest, 'postRequest');
// const mockDeleteRequest = jest.spyOn(PerformRequest, 'deleteRequest');
// class TestBaseClient extends BaseClient {
//   constructor() {
//     super('https://url.com', undefined, {});
//   }
// }
// const testBaseClient = new TestBaseClient();
// describe('BaseClient', () => {
//   beforeEach(() => {
//     jest.clearAllMocks();
//   });
//   it('.get', async () => {
//     mockGetRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.get(
//       '/woo',
//       { woo: 'yay' },
//       { headers: { blah: 'boo' } },
//     );
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       { woo: 'yay' },
//       { headers: { blah: 'boo' } },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.rawGet', async () => {
//     mockGetRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.rawGet('/woo', {
//       headers: { blah: 'boo' },
//     });
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       undefined,
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.put', async () => {
//     mockPutRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.put(
//       '/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(mockPutRequest).toHaveBeenCalledTimes(1);
//     expect(mockPutRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.rawPut', async () => {
//     mockPutRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.rawPut('/woo', {
//       headers: { blah: 'boo' },
//     });
//     expect(mockPutRequest).toHaveBeenCalledTimes(1);
//     expect(mockPutRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       undefined,
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.patch', async () => {
//     mockPatchRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.patch(
//       '/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(mockPatchRequest).toHaveBeenCalledTimes(1);
//     expect(mockPatchRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.rawPatch', async () => {
//     mockPatchRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.rawPatch('/woo', {
//       headers: { blah: 'boo' },
//     });
//     expect(mockPatchRequest).toHaveBeenCalledTimes(1);
//     expect(mockPatchRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       undefined,
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.post', async () => {
//     mockPostRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.post(
//       '/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(mockPostRequest).toHaveBeenCalledTimes(1);
//     expect(mockPostRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.rawPost', async () => {
//     mockPostRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.rawPost('/woo', {
//       headers: { blah: 'boo' },
//     });
//     expect(mockPostRequest).toHaveBeenCalledTimes(1);
//     expect(mockPostRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       undefined,
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.delete', async () => {
//     mockDeleteRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.delete(
//       '/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(mockDeleteRequest).toHaveBeenCalledTimes(1);
//     expect(mockDeleteRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       { woo: 'yay' },
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   it('.rawDelete', async () => {
//     mockDeleteRequest.mockResolvedValue('woo');
//     const res = await testBaseClient.rawDelete('/woo', {
//       headers: { blah: 'boo' },
//     });
//     expect(mockDeleteRequest).toHaveBeenCalledTimes(1);
//     expect(mockDeleteRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       undefined,
//       {
//         headers: { blah: 'boo' },
//       },
//     );
//     expect(res).toStrictEqual('woo');
//   });
//   class CustomAuthBaseClient extends BaseClient {
//     constructor() {
//       super('https://url.com', () => ({
//         Authorization: 'Bearer custom_auth_token',
//       }));
//     }
//   }
//   const customAuthBaseClient = new CustomAuthBaseClient();
//   it('should allow custom auth header generation', async () => {
//     await customAuthBaseClient.get('');
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith('https://url.com', undefined, {
//       headers: { Authorization: 'Bearer custom_auth_token' },
//     });
//   });
//   class TestOverrideBaseClient extends BaseClient {
//     constructor() {
//       super('https://url.com', () => ({ test: 'test1' }));
//     }
//     public override getAuthenticationHeaders(): Promise<
//       Record<string, string>
//     > {
//       return Promise.resolve({ test: 'test2' });
//     }
//   }
//   const testOverrideBaseClient = new TestOverrideBaseClient();
//   it('should allow overriding getAuthenticationHeaders', async () => {
//     await testOverrideBaseClient.get('');
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith(
//       expect.anything(),
//       undefined,
//       expect.objectContaining({
//         headers: expect.objectContaining({ test: 'test2' }),
//       }),
//     );
//   });
//   class NoAuthBaseClient extends BaseClient {
//     constructor() {
//       super('https://url.com');
//     }
//   }
//   const noAuthBaseClient = new NoAuthBaseClient();
//   it('should allow no auth requests', async () => {
//     await noAuthBaseClient.get('');
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith(
//       expect.anything(),
//       undefined,
//       expect.objectContaining({
//         headers: expect.not.objectContaining({
//           Authorization: expect.anything(),
//         }),
//       }),
//     );
//   });
//   test('should export RequestError', () => {
//     expect(PerformRequest.RequestError).toStrictEqual(RequestError);
//   });
//   test("shouldn't maintain state between requests", async () => {
//     await testBaseClient.put('woo', {}, { qs: { woo: 'yay' } });
//     await testBaseClient.get(
//       '/woo',
//       { woo: 'yay' },
//       { headers: { blah: 'boo' } },
//     );
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith(
//       'https://url.com/woo',
//       { woo: 'yay' },
//       { headers: { blah: 'boo' } },
//     );
//   });
//   class CustomOptionsBaseClient extends BaseClient {
//     constructor() {
//       super('https://url.com', undefined, { headers: { woo: 'yay0' } });
//     }
//   }
//   const customOptionsBaseClient = new CustomOptionsBaseClient();
//   class CustomFunctionOptionsBaseClient extends BaseClient {
//     constructor() {
//       super('https://url.com', undefined, () => ({ headers: { woo: 'yay1' } }));
//     }
//   }
//   const customFunctionOptionsBaseClient = new CustomFunctionOptionsBaseClient();
//   class CustomAsyncFunctionOptionsBaseClient extends BaseClient {
//     constructor() {
//       super('https://url.com', undefined, () => ({
//         headers: { woo: 'yay2' },
//       }));
//     }
//   }
//   const customAsyncFunctionOptionsBaseClient =
//     new CustomAsyncFunctionOptionsBaseClient();
//   it('should add custom options to each request', async () => {
//     await customOptionsBaseClient.get('');
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith('https://url.com', undefined, {
//       headers: { woo: 'yay0' },
//     });
//   });
//   it('should add custom function options to each request', async () => {
//     await customFunctionOptionsBaseClient.get('');
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith('https://url.com', undefined, {
//       headers: { woo: 'yay1' },
//     });
//   });
//   it('should add custom async function options to each request', async () => {
//     await customAsyncFunctionOptionsBaseClient.get('');
//     expect(mockGetRequest).toHaveBeenCalledTimes(1);
//     expect(mockGetRequest).toHaveBeenCalledWith('https://url.com', undefined, {
//       headers: { woo: 'yay2' },
//     });
//   });
//   const mockLogger = new MockLogger();
//   const mockAgent = new MockAgent(mockLogger);
//   class MetricsBaseClient extends BaseClient {
//     private header = 'test2';
//     constructor() {
//       super('https://url.com', () => ({ test: 'test1' }), {
//         metricsContext: new MetricsContext(mockAgent, new MetricName('woo')),
//       });
//     }
//     public override getAuthenticationHeaders(): Promise<
//       Record<string, string>
//     > {
//       return Promise.resolve({ test: this.header });
//     }
//   }
//   const metricsBaseClient = new MetricsBaseClient();
//   it('should send metrics', async () => {
//     await metricsBaseClient.get('');
//     expectToHaveBeenCalledOnceWith(mockAgent.addNumber, [
//       'woo_getAuthenticationHeaders_n',
//       1,
//     ]);
//     expectToHaveBeenCalledTimesWith(mockAgent.addBoolean, 3, [
//       ['woo_getAuthenticationHeaders_success', true],
//       ['woo_getAuthenticationHeaders_error', false],
//       ['woo_getAuthenticationHeaders_fault', false],
//     ]);
//     expect(mockGetRequest).toHaveBeenCalledWith('https://url.com', undefined, {
//       headers: { test: 'test2' },
//     });
//   });
// });
//# sourceMappingURL=baseClient.test.js.map