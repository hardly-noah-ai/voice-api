import {
  BadGatewayError,
  BadParameterError,
  BadRequestError,
  ConflictError,
  ForbiddenError,
  GatewayTimeoutError,
  getErrorMessage,
  getMessageIfError,
  getMessageIfHttpError,
  HttpError,
  InternalServiceError,
  isError,
  isHttpError,
  NotFoundError,
  NotImplementedError,
  NotUpdatedError,
  ServiceUnavailableError,
  UnauthorizedError,
} from '../../src';

describe('Errors', () => {
  test('Statuses', () => {
    expect(new NotUpdatedError().status).toBe(304);
    expect(new BadRequestError().status).toBe(400);
    expect(new BadParameterError().status).toBe(400);
    expect(new UnauthorizedError().status).toBe(401);
    expect(new ForbiddenError().status).toBe(403);
    expect(new NotFoundError().status).toBe(404);
    expect(new ConflictError().status).toBe(409);
    expect(new InternalServiceError().status).toBe(500);
    expect(new NotImplementedError().status).toBe(501);
    expect(new BadGatewayError().status).toBe(502);
    expect(new ServiceUnavailableError().status).toBe(503);
    expect(new GatewayTimeoutError().status).toBe(504);
  });

  test('JSON empty', () => {
    const underTest = new HttpError(123, undefined);
    expect(underTest.status).toBe(123);
    expect(underTest.message).toBe('');
  });

  test('JSON object', () => {
    const underTest = new HttpError(123, '{"woo":"yay"}');
    expect(underTest.status).toBe(123);
    expect(underTest.message).toBe('{"woo":"yay"}');
  });

  test('non-JSON object', () => {
    const underTest = new HttpError(123, 'this is not json');
    expect(underTest.status).toBe(123);
    expect(underTest.message).toBe('{"message":"this is not json"}');
  });

  describe('isHttpError', () => {
    test('HttpError', () => {
      expect(isHttpError(new HttpError(300))).toStrictEqual(true);
    });

    test('extended HttpError', () => {
      expect(isHttpError(new GatewayTimeoutError())).toStrictEqual(true);
    });

    test('Error', () => {
      expect(isHttpError(new Error())).toStrictEqual(false);
    });

    test('non-Error', () => {
      expect(isHttpError('woo')).toStrictEqual(false);
    });
  });

  describe('getErrorMessage', () => {
    test('HttpError', () => {
      expect(getErrorMessage(new HttpError(300, 'woo'))).toStrictEqual('woo');
    });

    test('extended HttpError', () => {
      expect(getErrorMessage(new GatewayTimeoutError('woo'))).toStrictEqual(
        'woo',
      );
    });

    test('HttpError with non-string message', () => {
      expect(
        getErrorMessage(new HttpError(300, { woo: 'yay' } as never)),
      ).toStrictEqual(JSON.stringify({ woo: 'yay' }));
    });

    test('HttpError with no message', () => {
      expect(getErrorMessage(new HttpError(300))).toStrictEqual('');
    });

    test('Error', () => {
      expect(getErrorMessage(new Error('woo') as HttpError)).toStrictEqual(
        'woo',
      );
    });
  });

  describe('getMessageIfHttpError', () => {
    test('HttpError', () => {
      expect(getMessageIfHttpError(new HttpError(300, 'woo'))).toStrictEqual(
        'woo',
      );
    });

    test('non-HttpError', () => {
      expect(getMessageIfHttpError(new Error('woo'))).toStrictEqual(undefined);
    });
  });

  describe('isError', () => {
    test('HttpError', () => {
      expect(isError(new HttpError(300, 'woo'))).toStrictEqual(true);
    });

    test('Error', () => {
      expect(isError(new Error('woo'))).toStrictEqual(true);
    });

    test('Error - no message', () => {
      expect(isError(new Error())).toStrictEqual(true);
    });

    test('non-Error', () => {
      expect(isError('woo')).toStrictEqual(false);
    });
  });

  describe('getMessageIfError', () => {
    test('HttpError', () => {
      expect(getMessageIfError(new HttpError(300, 'woo'))).toStrictEqual('woo');
    });

    test('Error', () => {
      expect(getMessageIfError(new Error('woo'))).toStrictEqual('woo');
    });

    test('Error - no message', () => {
      expect(getMessageIfError(new Error())).toStrictEqual('');
    });

    test('non-Error', () => {
      expect(getMessageIfError('woo')).toStrictEqual(undefined);
    });
  });
});
