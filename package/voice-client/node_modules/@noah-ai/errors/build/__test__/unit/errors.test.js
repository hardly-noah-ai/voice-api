"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src");
describe('Errors', () => {
    test('Statuses', () => {
        expect(new src_1.NotUpdatedError().status).toBe(304);
        expect(new src_1.BadRequestError().status).toBe(400);
        expect(new src_1.BadParameterError().status).toBe(400);
        expect(new src_1.UnauthorizedError().status).toBe(401);
        expect(new src_1.ForbiddenError().status).toBe(403);
        expect(new src_1.NotFoundError().status).toBe(404);
        expect(new src_1.ConflictError().status).toBe(409);
        expect(new src_1.InternalServiceError().status).toBe(500);
        expect(new src_1.NotImplementedError().status).toBe(501);
        expect(new src_1.BadGatewayError().status).toBe(502);
        expect(new src_1.ServiceUnavailableError().status).toBe(503);
        expect(new src_1.GatewayTimeoutError().status).toBe(504);
    });
    test('JSON empty', () => {
        const underTest = new src_1.HttpError(123, undefined);
        expect(underTest.status).toBe(123);
        expect(underTest.message).toBe('');
    });
    test('JSON object', () => {
        const underTest = new src_1.HttpError(123, '{"woo":"yay"}');
        expect(underTest.status).toBe(123);
        expect(underTest.message).toBe('{"woo":"yay"}');
    });
    test('non-JSON object', () => {
        const underTest = new src_1.HttpError(123, 'this is not json');
        expect(underTest.status).toBe(123);
        expect(underTest.message).toBe('{"message":"this is not json"}');
    });
    describe('isHttpError', () => {
        test('HttpError', () => {
            expect((0, src_1.isHttpError)(new src_1.HttpError(300))).toStrictEqual(true);
        });
        test('extended HttpError', () => {
            expect((0, src_1.isHttpError)(new src_1.GatewayTimeoutError())).toStrictEqual(true);
        });
        test('Error', () => {
            expect((0, src_1.isHttpError)(new Error())).toStrictEqual(false);
        });
        test('non-Error', () => {
            expect((0, src_1.isHttpError)('woo')).toStrictEqual(false);
        });
    });
    describe('getErrorMessage', () => {
        test('HttpError', () => {
            expect((0, src_1.getErrorMessage)(new src_1.HttpError(300, 'woo'))).toStrictEqual('woo');
        });
        test('extended HttpError', () => {
            expect((0, src_1.getErrorMessage)(new src_1.GatewayTimeoutError('woo'))).toStrictEqual('woo');
        });
        test('HttpError with non-string message', () => {
            expect((0, src_1.getErrorMessage)(new src_1.HttpError(300, { woo: 'yay' }))).toStrictEqual(JSON.stringify({ woo: 'yay' }));
        });
        test('HttpError with no message', () => {
            expect((0, src_1.getErrorMessage)(new src_1.HttpError(300))).toStrictEqual('');
        });
        test('Error', () => {
            expect((0, src_1.getErrorMessage)(new Error('woo'))).toStrictEqual('woo');
        });
    });
    describe('getMessageIfHttpError', () => {
        test('HttpError', () => {
            expect((0, src_1.getMessageIfHttpError)(new src_1.HttpError(300, 'woo'))).toStrictEqual('woo');
        });
        test('non-HttpError', () => {
            expect((0, src_1.getMessageIfHttpError)(new Error('woo'))).toStrictEqual(undefined);
        });
    });
    describe('isError', () => {
        test('HttpError', () => {
            expect((0, src_1.isError)(new src_1.HttpError(300, 'woo'))).toStrictEqual(true);
        });
        test('Error', () => {
            expect((0, src_1.isError)(new Error('woo'))).toStrictEqual(true);
        });
        test('Error - no message', () => {
            expect((0, src_1.isError)(new Error())).toStrictEqual(true);
        });
        test('non-Error', () => {
            expect((0, src_1.isError)('woo')).toStrictEqual(false);
        });
    });
    describe('getMessageIfError', () => {
        test('HttpError', () => {
            expect((0, src_1.getMessageIfError)(new src_1.HttpError(300, 'woo'))).toStrictEqual('woo');
        });
        test('Error', () => {
            expect((0, src_1.getMessageIfError)(new Error('woo'))).toStrictEqual('woo');
        });
        test('Error - no message', () => {
            expect((0, src_1.getMessageIfError)(new Error())).toStrictEqual('');
        });
        test('non-Error', () => {
            expect((0, src_1.getMessageIfError)('woo')).toStrictEqual(undefined);
        });
    });
});
//# sourceMappingURL=errors.test.js.map